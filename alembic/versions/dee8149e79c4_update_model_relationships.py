"""update_model_relationships

Revision ID: dee8149e79c4
Revises: 41336445a49c
Create Date: 2024-12-04 20:09:35.180102

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'dee8149e79c4'
down_revision = '41336445a49c'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    tables = inspector.get_table_names()
    
    if 'contents' in tables:
        op.drop_table('contents')
    if 'comment_stats' in tables:
        op.drop_table('comment_stats')
    if 'events' in tables:
        op.drop_index('ix_events_id', table_name='events')
        op.drop_table('events')
    if 'comments' in tables:
        op.drop_table('comments')
    if 'articles' in tables:
        op.drop_table('articles')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('articles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('articles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('main_keyword', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('naver_link', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('original_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('publisher', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('publisher_domain', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('published_date', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_naver_news', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_test', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_api_collection', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='articles_pkey'),
    sa.UniqueConstraint('main_keyword', 'naver_link', name='uq_main_keyword_naver_link'),
    postgresql_ignore_search_path=False
    )
    op.create_table('comments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('comments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('article_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('comment_no', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('parent_comment_no', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('profile_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dislikes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reply_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_reply', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('delete_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], name='comments_article_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='events_pkey')
    )
    op.create_index('ix_events_id', 'events', ['id'], unique=False)
    op.create_table('comment_stats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('comment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dislikes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_deleted_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('admin_deleted_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_deleted_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('gender_ratio', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('male_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('female_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('age_10s', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_20s', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_30s', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_40s', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_50s', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('age_60s_above', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('likes_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('replies_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('avg_likes_per_comment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_replies_per_comment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hourly_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('daily_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('peak_hours', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('unique_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_participation', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('repeat_commenter_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('avg_comment_length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quality_metrics', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('spam_ratio', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sentiment_distribution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('controversy_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('collection_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_complete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('collected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.id'], name='comment_stats_comment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='comment_stats_pkey'),
    sa.UniqueConstraint('comment_id', name='comment_stats_comment_id_key')
    )
    op.create_table('contents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('article_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('published_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('modified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], name='contents_article_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='contents_pkey'),
    sa.UniqueConstraint('article_id', name='contents_article_id_key')
    )
    # ### end Alembic commands ###
